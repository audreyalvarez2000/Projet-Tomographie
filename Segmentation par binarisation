# Detection de contour avec binarisation
# Permet de réccupérer uniquement l'objet dans l'image
# Ouverture de l'image 
# Création d'une image vide (image toute blanche)
# On parcourt l'image et on test chaque pixel
# Si la norme des 8 voisins du pixel est supérieur à une valeur seuil choisi afin d'éliminer le bruit (le fond de l'image)
# Alors le pixel est reformé sur l'image vide en Noir. 




from PIL import Image
from math import *
image1 = Image.open("imtrait.tiff") #Ouverture de l'image.
plt.imshow(image1)
plt.show()
dimx=image1.size[0] # Récupération des dimensions de l'image
dimy=image1.size[1]
image2 = Image.new ('RGB' , (dimx,dimy),(255,255,255)) # Création d'une image vide.
for  y in range(1,dimy-1) :
    for x in range ( 1,dimx-2):
        rvbCentre = image1.getpixel((x,y)) # le pixel central !
        rvbVoisin1= image1.getpixel((x+1,y-1)) # Les 8 voisins
        rvbVoisin2= image1.getpixel((x-1,y+1))
        rvbVoisin3= image1.getpixel((x-1,y-1))
        rvbVoisin4= image1.getpixel((x+1,y+1))
        rvbVoisin5= image1.getpixel((x,y-1))
        rvbVoisin6= image1.getpixel((x,y+1))
        rvbVoisin7= image1.getpixel((x-1,y))
        rvbVoisin8= image1.getpixel((x+1,y))
        norme=sqrt((rvbVoisin1[1]-rvbVoisin2[2])**2+(rvbVoisin3[1]-rvbVoisin4[1])**2+(rvbVoisin5[1]-rvbVoisin6[1])**2+(rvbVoisin7[1]-rvbVoisin8[1])**2)
        if norme > 10 :
            image2.putpixel((x,y),(0,0,0))
image2.save("contour.jpg") #On sauvegarde la nouvelle image
plt.imshow(image2)
plt.show()
